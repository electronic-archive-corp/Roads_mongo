// Generated by CoffeeScript 1.6.3
(function() {
  var addItems, app, connect, connected, db, deleteItems, getItems, http, ipaddr, mongo, mongo_host, mongo_port, openDB, options, path, port, server, updateItem, url;

  connect = require("connect");

  http = require("http");

  path = require("path");

  url = require("url");

  mongo = require("mongodb");

  options = {};

  ipaddr = process.env.OPENSHIFT_INTERNAL_IP || "127.0.0.1";

  port = process.env.OPENSHIFT_INTERNAL_PORT || 81;

  mongo_host = "localhost" || "memorial02.cloudapp.net";

  mongo_port = mongo.Connection.DEFAULT_PORT || 27017;

  console.log("Server starting at http://" + ipaddr + ":" + port + "/");

  console.log("Connecting to database...");

  server = new mongo.Server(mongo_host, mongo_port, {
    auto_reconnect: false,
    socketOptions: {
      keepAlive: 10,
      connectTimeoutMS: 1000,
      socketTimeoutMS: 0
    }
  });

  connected = false;

  db = new mongo.Db("Podvig", server, {
    safe: false,
    w: 1,
    wtimeout: 1000,
    numberOfRetries: -1,
    auto_reconnect: false
  });

  openDB();

  db.on("close", function(error) {
    connected = false;
    console.log("Connection to the database was closed!");
    return openDB();
  });

  db.on("error", function(err) {
    return console.log("Mongo...error", err);
  });

  db.on("disconnect", function(err) {
    return console.log("Mongo...disconnect", err);
  });

  db.on("disconnected", function(err) {
    return console.log("Mongo...disconnected", err);
  });

  db.on("parseError", function(err) {
    return console.log("Mongo...parse", err);
  });

  db.on("timeout", function(err) {
    return console.log("Mongo...timeout", err);
  });

  app = connect();

  app.use(connect.logger());

  connect.logger({
    immediate: true,
    format: "dev"
  });

  app.use(connect.json());

  app.use(connect.urlencoded());

  app.use(function(req, res) {
    var ex, u;
    try {
      if (!connected) {
        throw new Error("Not connected to mongodb");
      }
      u = url.parse(req.url, true);
      if (u && u.query && u.query.collection) {
        if (u.pathname === "/get") {
          getItems(u, req, res);
        } else if (u.pathname === "/update") {
          updateItem(u, req, res);
        } else if (u.pathname === "/delete") {
          deleteItems(u, req, res);
        } else {
          if (u.pathname === "/add") {
            addItems(u, req, res);
          }
        }
        return;
      }
    } catch (_error) {
      ex = _error;
      console.log(ex);
      res.writeHead(200, {
        "Content-Type": "text/plain"
      });
      res.end("Database connection lost, try again later...\n");
      return;
    }
    res.writeHead(200, {
      "Content-Type": "text/plain"
    });
    return res.end("Hello World\n");
  });

  openDB = function() {
    return db.open(function(err, db) {
      if (err) {
        if (!(err instanceof Error)) {
          err = new Error(String(err));
        }
        err.message = "Error connecting to database: " + err.message;
        return;
      }
      if (options.username && options.password) {
        db.authenticate(options.username, options.password, function() {});
      }
      console.log(" Connected to db!");
      return connected = true;
    });
  };

  addItems = function(u, req, res) {
    var collection, items;
    collection = u.query.collection;
    items = u.query.items || req.body;
    return db.collection(collection, function(err, coll) {
      return coll.insert(items, {
        safe: true
      }, function(err, result) {
        var r;
        if (err) {
          return res.end("{'error':'An error has occurred" + err + "'}");
        } else {
          r = JSON.stringify(result);
          console.log("Success: " + r);
          return res.end(r);
        }
      });
    });
  };

  updateItem = function(u, req, res) {
    var collection, id, item;
    collection = u.query.collection;
    id = u.query.id;
    item = req.body;
    console.log("Updating item: " + id);
    console.log(JSON.stringify(item));
    return db.collection(collection, function(err, collection) {
      return collection.update({
        _id: new mongo.ObjectID(id)
      }, item, {
        safe: true
      }, function(err, result) {
        if (err) {
          console.log("Error updating item: " + err);
          return res.end("{'error':'An error has occurred'}");
        } else {
          console.log(result + " document(s) updated");
          return res.end(JSON.stringify(item));
        }
      });
    });
  };

  getItems = function(u, req, res) {
    var collection, i, items;
    collection = u.query.collection;
    items = u.query.items.split(",");
    i = 0;
    while (i < items.length) {
      items[i] = mongo.ObjectID(items[i]);
      i++;
    }
    return db.collection(collection, function(err, coll) {
      if (err) {
        throw err;
      }
      return coll.find({
        _id: {
          $in: items
        }
      }).toArray(function(err, items) {
        if (err) {
          res.end("{'error':'An error has occurred - " + err + "'}");
          throw err;
        } else {
          return res.end(JSON.stringify(items));
        }
      });
    });
  };

  deleteItems = function(u, req, res) {
    var collection, i, id;
    collection = u.query.collection;
    id = u.query.items || req.body;
    if (!Array.isArray(id)) {
      id = [id];
    }
    console.log("Deleting item(s): " + id);
    i = 0;
    while (i < id.length) {
      id[i] = mongo.ObjectID(id[i]);
      i++;
    }
    return db.collection(collection, function(err, collection) {
      return collection.remove({
        _id: {
          $in: id
        }
      }, {
        safe: true
      }, function(err, result) {
        if (err) {
          return res.end("{'error':'An error has occurred - " + err + "'}");
        } else {
          console.log(result + " document(s) deleted");
          return res.end("{\"deleted\":" + result + "}");
        }
      });
    });
  };

  http.createServer(app).listen(port, ipaddr);

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
